// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  image         String?
  createdAt     DateTime        @default(now())
  posts         Post[]
  clerkUserId   String          @unique
  ApiKey        ApiKey[]
  Media         Media[]
  SocialContent SocialContent[]
  SocialAuth    SocialAuth[]
  Project       Project[]
}

model Project {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  posts       Post[]
  Media       Media[]
  ApiKey      ApiKey[]
}

model Category {
  id     String  @id @default(cuid())
  name   String  @unique
  Post   Post?   @relation(fields: [postId], references: [id])
  postId String?
}

model Post {
  id          String     @id @default(cuid())
  title       String
  subtitle    String?
  slug        String
  body        String
  coverImage  String?
  author      User       @relation(fields: [authorId], references: [id])
  authorId    String
  categories  Category[]
  createdAt   DateTime   @default(now())
  isPublished Boolean
  savedAt     DateTime
  publishedAt DateTime?
  project     Project    @relation(fields: [projectId], references: [id])
  projectId   String

  @@unique([authorId, slug])
}

model ApiKey {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  apiKey    String   @unique
  keyPrefix String
  scopes    String[]
  user      User     @relation(fields: [userId], references: [id])
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
}

model Media {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  url       String
  mediaType String
  filename  String
  user      User     @relation(fields: [userId], references: [id])
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  name      String?
}

model SocialContent {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  media       String?
  message     String
  userId      String
  scheduledAt DateTime
  sentAt      DateTime?
  providerId  String
  isSent      Boolean
  user        User      @relation(fields: [userId], references: [id])
}

model SocialAuth {
  id           String         @id @default(cuid())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  userId       String
  providerId   String
  accessToken  String
  refreshToken String
  expiresIn    Int
  user         User           @relation(fields: [userId], references: [id])
  provider     SocialProvider @relation(fields: [providerId], references: [id])
}

model SocialProvider {
  id         String       @id @default(cuid())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  provider   String       @unique
  SocialAuth SocialAuth[]
}
